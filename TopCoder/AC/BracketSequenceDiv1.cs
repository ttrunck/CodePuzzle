using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Text;
using System.Text.RegularExpressions;
using System.Linq;


public class BracketSequenceDiv1
{

    public long count(string s)
    {
        int n = s.Length;
        var d = new long[n + 1, n + 1];

        for (int k = 0; k <= n; ++k)
            d[k, k] = 1;

        for (int len = 1; len <= n; ++len)
            for (int i = 0; i + len <= n; ++i)
            {
                int j = i + len;

                d[i, j] = d[i + 1, j];

                for (int k = i + 1; k < j; ++k)
                    if ((s[i] == '(' && s[k] == ')') || (s[i] == '[' && s[k] == ']'))
                        d[i, j] += d[i + 1, k] * d[k + 1, j];
            }

        return d[0, n] - 1;
    }

    // BEGIN KAWIGIEDIT TESTING
    // Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
    #region Testing code generated by KawigiEdit
    [STAThread]
    private static Boolean KawigiEdit_RunTest(int testNum, string p0, Boolean hasAnswer, long p1)
    {
        Console.Write("Test " + testNum + ": [" + "\"" + p0 + "\"");
        Console.WriteLine("]");
        BracketSequenceDiv1 obj;
        long answer;
        obj = new BracketSequenceDiv1();
        DateTime startTime = DateTime.Now;
        answer = obj.count(p0);
        DateTime endTime = DateTime.Now;
        Boolean res;
        res = true;
        Console.WriteLine("Time: " + (endTime - startTime).TotalSeconds + " seconds");
        if (hasAnswer)
        {
            Console.WriteLine("Desired answer:");
            Console.WriteLine("\t" + p1);
        }
        Console.WriteLine("Your answer:");
        Console.WriteLine("\t" + answer);
        if (hasAnswer)
        {
            res = answer == p1;
        }
        if (!res)
        {
            Console.WriteLine("DOESN'T MATCH!!!!");
        }
        else if ((endTime - startTime).TotalSeconds >= 2)
        {
            Console.WriteLine("FAIL the timeout");
            res = false;
        }
        else if (hasAnswer)
        {
            Console.WriteLine("Match :-)");
        }
        else
        {
            Console.WriteLine("OK, but is it right?");
        }
        Console.WriteLine("");
        return res;
    }
    public static void Main(string[] args)
    {
        Boolean all_right;
        all_right = true;

        string p0;
        long p1;

        // ----- test 0 -----
        p0 = "()[]";
        p1 = 3L;
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------

        // ----- test 1 -----
        p0 = "())";
        p1 = 2L;
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------

        // ----- test 2 -----
        p0 = "()()";
        p1 = 4L;
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------

        // ----- test 3 -----
        p0 = "([)]";
        p1 = 2L;
        all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
        // ------------------

        // ----- test 4 -----
        p0 = "())[]][]([]()]]()]]]";
        p1 = 3854L;
        all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
        // ------------------

        if (all_right)
        {
            Console.WriteLine("You're a stud (at least on the example cases)!");
        }
        else
        {
            Console.WriteLine("Some of the test cases had errors.");
        }
        Console.ReadKey();
    }
    #endregion
    // END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
