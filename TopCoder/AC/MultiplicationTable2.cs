using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Text;
using System.Text.RegularExpressions;


public class MultiplicationTable2
{
    private bool next(ref HashSet<int> s, int[] table, int n)
    {
        var ss = new HashSet<int>();

        foreach (var x in s)
            foreach (var y in s)
            {
                ss.Add(x);
                ss.Add(table[x * n + y]);
                ss.Add(table[y * n + x]);
            }

        var res = ss.Count != s.Count;
        s = ss;
        return res;
    }

    public int minimalGoodSet(int[] table)
    {
        int n = (int)Math.Sqrt(table.Length);
        int res = n;

        for (int i = 0; i < n; ++i)
        {
            var tmp = new HashSet<int> { i };
            while (next(ref tmp, table, n)) ;
            res = Math.Min(res, tmp.Count);
        }


        return res;
    }

    // BEGIN KAWIGIEDIT TESTING
    // Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
    #region Testing code generated by KawigiEdit
    [STAThread]
    private static Boolean KawigiEdit_RunTest(int testNum, int[] p0, Boolean hasAnswer, int p1)
    {
        Console.Write("Test " + testNum + ": [" + "{");
        for (int i = 0; p0.Length > i; ++i)
        {
            if (i > 0)
            {
                Console.Write(",");
            }
            Console.Write(p0[i]);
        }
        Console.Write("}");
        Console.WriteLine("]");
        MultiplicationTable2 obj;
        int answer;
        obj = new MultiplicationTable2();
        DateTime startTime = DateTime.Now;
        answer = obj.minimalGoodSet(p0);
        DateTime endTime = DateTime.Now;
        Boolean res;
        res = true;
        Console.WriteLine("Time: " + (endTime - startTime).TotalSeconds + " seconds");
        if (hasAnswer)
        {
            Console.WriteLine("Desired answer:");
            Console.WriteLine("\t" + p1);
        }
        Console.WriteLine("Your answer:");
        Console.WriteLine("\t" + answer);
        if (hasAnswer)
        {
            res = answer == p1;
        }
        if (!res)
        {
            Console.WriteLine("DOESN'T MATCH!!!!");
        }
        else if ((endTime - startTime).TotalSeconds >= 2)
        {
            Console.WriteLine("FAIL the timeout");
            res = false;
        }
        else if (hasAnswer)
        {
            Console.WriteLine("Match :-)");
        }
        else {
            Console.WriteLine("OK, but is it right?");
        }
        Console.WriteLine("");
        return res;
    }
    public static void Main(string[] args)
    {
        Boolean all_right;
        all_right = true;

        int[] p0;
        int p1;

        // ----- test 0 -----
        p0 = new int[] { 1, 1, 2, 3, 1, 0, 3, 2, 2, 0, 1, 3, 1, 2, 3, 0 };
        p1 = 2;
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------

        // ----- test 1 -----
        p0 = new int[] { 0, 1, 2, 3, 1, 2, 3, 0, 2, 3, 0, 1, 3, 0, 1, 2 };
        p1 = 1;
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------

        // ----- test 2 -----
        p0 = new int[] { 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 0, 0, 0, 0 };
        p1 = 4;
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------

        // ----- test 3 -----
        p0 = new int[] { 0 };
        p1 = 1;
        all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
        // ------------------

        if (all_right)
        {
            Console.WriteLine("You're a stud (at least on the example cases)!");
        }
        else {
            Console.WriteLine("Some of the test cases had errors.");
        }
        Console.ReadKey();
    }

    #endregion
    // END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
