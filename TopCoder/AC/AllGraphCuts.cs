using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Text;
using System.Text.RegularExpressions;
using System.Linq;


public class AllGraphCuts
{
    int[] p;

    int find(int x)
    {
        if (p[x] == x) return x;
        return p[x] = find(p[x]);
    }

    public int[] findGraph(int[] x)
    {
        var n = (int)Math.Sqrt(x.Length);
        var t = new List<Tuple<int, int, int>>();
        p = new int[n];
        for (int i = 0; i < n; ++i)
            p[i] = i;
        for (int i = 0; i < n; ++i)
            for (int j = 0; j < n; ++j)
            {
                if (i == j && x[i * n + j] != 0) return new int[1] { -1 };
                if (x[i * n + j] != x[j * n + i]) return new int[1] { -1 };
                t.Add(new Tuple<int, int, int>(i, j, x[i * n + j]));
            }

        var res = new List<int>();
        var g = new List<int>[n];
        for (int i = 0; i < n; ++i)
            g[i] = new List<int>();
        foreach (var e in t.OrderByDescending(e => e.Item3))
        {
            if (find(e.Item1) != find(e.Item2))
            {
                p[find(e.Item1)] = find(e.Item2);
                g[e.Item1].Add(e.Item2);
                g[e.Item2].Add(e.Item1);
                res.Add(e.Item3 * n * n + e.Item1 * n + e.Item2);
            }
        }

        const int INF = 200000;
        for (int i = 0; i < n; i++)
        {
            var minim = new int[n];
            for (int k = 0; k < n; ++k)
                minim[k] = INF;
            var q = new Queue<int>();
            q.Enqueue(i);
            minim[i] = INF;

            while (!(q.Count == 0))
            {
                int u = q.Dequeue();
                foreach (var v in g[u])
                {
                    if ((minim[v] == INF) && (v != i))
                    {
                        minim[v] = Math.Min(minim[u], x[u * n + v]);
                        q.Enqueue(v);
                    }
                }
            }
            minim[i] = 0;
            for (int j = 0; j < n; j++)
            {
                if (minim[j] != x[i * n + j])
                {
                    return new int[] { -1 };
                }
            }
        }

        return res.ToArray();
    }

    // BEGIN KAWIGIEDIT TESTING
    // Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
    #region Testing code generated by KawigiEdit
    [STAThread]
    private static Boolean KawigiEdit_RunTest(int testNum, int[] p0, Boolean hasAnswer, int[] p1)
    {
        Console.Write("Test " + testNum + ": [" + "{");
        for (int i = 0; p0.Length > i; ++i)
        {
            if (i > 0)
            {
                Console.Write(",");
            }
            Console.Write(p0[i]);
        }
        Console.Write("}");
        Console.WriteLine("]");
        AllGraphCuts obj;
        int[] answer;
        obj = new AllGraphCuts();
        DateTime startTime = DateTime.Now;
        answer = obj.findGraph(p0);
        DateTime endTime = DateTime.Now;
        Boolean res;
        res = true;
        Console.WriteLine("Time: " + (endTime - startTime).TotalSeconds + " seconds");
        if (hasAnswer)
        {
            Console.WriteLine("Desired answer:");
            Console.Write("\t" + "{");
            for (int i = 0; p1.Length > i; ++i)
            {
                if (i > 0)
                {
                    Console.Write(",");
                }
                Console.Write(p1[i]);
            }
            Console.WriteLine("}");
        }
        Console.WriteLine("Your answer:");
        Console.Write("\t" + "{");
        for (int i = 0; answer.Length > i; ++i)
        {
            if (i > 0)
            {
                Console.Write(",");
            }
            Console.Write(answer[i]);
        }
        Console.WriteLine("}");
        if (hasAnswer)
        {
            if (answer.Length != p1.Length)
            {
                res = false;
            }
            else
            {
                for (int i = 0; answer.Length > i; ++i)
                {
                    if (answer[i] != p1[i])
                    {
                        res = false;
                    }
                }
            }
        }
        if (!res)
        {
            Console.WriteLine("DOESN'T MATCH!!!!");
        }
        else if ((endTime - startTime).TotalSeconds >= 2)
        {
            Console.WriteLine("FAIL the timeout");
            res = false;
        }
        else if (hasAnswer)
        {
            Console.WriteLine("Match :-)");
        }
        else
        {
            Console.WriteLine("OK, but is it right?");
        }
        Console.WriteLine("");
        return res;
    }
    public static void Main(string[] args)
    {
        Boolean all_right;
        all_right = true;

        int[] p0;
        int[] p1;

        // ----- test 0 -----
        p0 = new int[] { 0, 1, 1, 0 };
        p1 = new int[] { 6 };
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------

        // ----- test 1 -----
        p0 = new int[] { 0, 1, 1, 1 };
        p1 = new int[] { -1 };
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------

        // ----- test 2 -----
        p0 = new int[] { 0, 2, 2, 2, 0, 2, 2, 2, 0 };
        p1 = new int[] { 10, 11, 14 };
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------

        // ----- test 3 -----
        p0 = new int[] { 0, 1, 2, 3, 4, 1, 0, 2, 3, 4, 1, 2, 0, 3, 4, 1, 2, 3, 0, 4, 1, 2, 3, 4, 0 };
        p1 = new int[] { -1 };
        all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
        // ------------------

        // ----- test 4 -----
        p0 = new int[] { 0, 0, 0, 0 };
        p1 = new int[] { 2 };
        all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
        // ------------------

        // ----- test 5 -----
        p0 = new int[] { 0, 2545, 2348, 2993, 2606, 2623, 2013, 3001, 2626, 2440, 2495, 2262, 2342, 2617, 2773, 2662, 2736, 2827, 3044, 3082, 2545, 0, 2348, 2545, 2545, 2545, 2013, 2545, 2545, 2440, 2495, 2262, 2342, 2545, 2545, 2545, 2545, 2545, 2545, 2545, 2348, 2348, 0, 2348, 2348, 2348, 2013, 2348, 2348, 2348, 2348, 2262, 2342, 2348, 2348, 2348, 2348, 2348, 2348, 2348, 2993, 2545, 2348, 0, 2606, 2623, 2013, 2993, 2626, 2440, 2495, 2262, 2342, 2617, 2773, 2662, 2736, 2827, 2993, 2993, 2606, 2545, 2348, 2606, 0, 2606, 2013, 2606, 2606, 2440, 2495, 2262, 2342, 2606, 2606, 2606, 2606, 2606, 2606, 2606, 2623, 2545, 2348, 2623, 2606, 0, 2013, 2623, 2623, 2440, 2495, 2262, 2342, 2617, 2623, 2623, 2623, 2623, 2623, 2623, 2013, 2013, 2013, 2013, 2013, 2013, 0, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 3001, 2545, 2348, 2993, 2606, 2623, 2013, 0, 2626, 2440, 2495, 2262, 2342, 2617, 2773, 2662, 2736, 2827, 3001, 3001, 2626, 2545, 2348, 2626, 2606, 2623, 2013, 2626, 0, 2440, 2495, 2262, 2342, 2617, 2626, 2626, 2626, 2626, 2626, 2626, 2440, 2440, 2348, 2440, 2440, 2440, 2013, 2440, 2440, 0, 2440, 2262, 2342, 2440, 2440, 2440, 2440, 2440, 2440, 2440, 2495, 2495, 2348, 2495, 2495, 2495, 2013, 2495, 2495, 2440, 0, 2262, 2342, 2495, 2495, 2495, 2495, 2495, 2495, 2495, 2262, 2262, 2262, 2262, 2262, 2262, 2013, 2262, 2262, 2262, 2262, 0, 2262, 2262, 2262, 2262, 2262, 2262, 2262, 2262, 2342, 2342, 2342, 2342, 2342, 2342, 2013, 2342, 2342, 2342, 2342, 2262, 0, 2342, 2342, 2342, 2342, 2342, 2342, 2342, 2617, 2545, 2348, 2617, 2606, 2617, 2013, 2617, 2617, 2440, 2495, 2262, 2342, 0, 2617, 2617, 2617, 2617, 2617, 2617, 2773, 2545, 2348, 2773, 2606, 2623, 2013, 2773, 2626, 2440, 2495, 2262, 2342, 2617, 0, 2662, 2736, 2773, 2773, 2773, 2662, 2545, 2348, 2662, 2606, 2623, 2013, 2662, 2626, 2440, 2495, 2262, 2342, 2617, 2662, 0, 2662, 2662, 2662, 2662, 2736, 2545, 2348, 2736, 2606, 2623, 2013, 2736, 2626, 2440, 2495, 2262, 2342, 2617, 2736, 2662, 0, 2736, 2736, 2736, 2827, 2545, 2348, 2827, 2606, 2623, 2013, 2827, 2626, 2440, 2495, 2262, 2342, 2617, 2773, 2662, 2736, 0, 2827, 2827, 3044, 2545, 2348, 2993, 2606, 2623, 2013, 3001, 2626, 2440, 2495, 2262, 2342, 2617, 2773, 2662, 2736, 2827, 0, 3044, 3082, 2545, 2348, 2993, 2606, 2623, 2013, 3001, 2626, 2440, 2495, 2262, 2342, 2617, 2773, 2662, 2736, 2827, 3044, 0 };
        p1 = new int[] { 76801, 87602, 76403, 15604, 14005, 14406, 95607, 14408, 45609, 54010, 113211, 102812, 53613, 72414, 10015, 90416, 110417, 108818, 76819, 20022, 5223, 16824, 14025, 20426, 37227, 115628, 118829, 105230, 39631, 114032, 70833, 2434, 9235, 71636, 3637, 108438, 68439, 16443, 24444, 37245, 54046, 118447, 46048, 13249, 38450, 27651, 23652, 105253, 76054, 22455, 112056, 5657, 82458, 28859, 31264, 117665, 73666, 91667, 11268, 67269, 110870, 18471, 114872, 119673, 22074, 86075, 44876, 22477, 74478, 93679, 96085, 8486, 59687, 110088, 1689, 107290, 56091, 56092, 74893, 61294, 109295, 109296, 18097, 66498, 20899, 12506, 98907, 82908, 77309, 51710, 110111, 108112, 22513, 66514, 43315, 36516, 19717, 15318, 26519, 34127, 70128, 8929, 20930, 131, 81732, 80133, 29334, 68935, 53336, 81737, 36538, 57739, 35348, 96149, 25750, 19351, 15752, 4153, 80554, 107355, 96556, 70557, 66958, 48559, 33769, 81370, 55771, 15372, 61373, 72574, 11375, 2976, 66577, 108178, 57779, 590, 78991, 14992, 10593, 69794, 47395, 33796, 113397, 77398, 68999, 77811, 28212, 12613, 64614, 80215, 9816, 27017, 30618, 73819, 46632, 66633, 7834, 100635, 636, 7437, 4238, 76639, 87453, 16254, 10255, 31856, 50257, 18258, 3459, 73474, 69475, 63876, 41077, 3878, 28679, 13495, 56696, 109497, 101098, 116699, 60316, 107517, 12318, 98719, 51137, 91138, 81139, 108358, 119959, 106379 };
        all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
        // ------------------

        if (all_right)
        {
            Console.WriteLine("You're a stud (at least on the example cases)!");
        }
        else
        {
            Console.WriteLine("Some of the test cases had errors.");
        }
        Console.ReadKey();
    }
    #endregion
    // END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
