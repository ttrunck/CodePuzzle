using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Text;
using System.Text.RegularExpressions;
using System.Linq;

public class GCDLCM2
{
    const int MOD = 1000000007;

    static long pow(long x, int n)
    {
        long y = 1;
        while (n != 0)
        {
            if ((n & 1) == 1)
                y = (y * x) % MOD;
            x = (x * x) % MOD;
            n = n >> 1;
        }

        return y;
    }

    public int getMaximalSum(int[] start, int[] d, int[] cnt)
    {
        int N = 10000000;
        var p = new int[N];
        for (int i = 0; i < N; ++i)
            p[i] = i;
        for (int i = 2; i < N; ++i)
            if (p[i] == i)
            {
                for (int j = i + i; j < N; j += i)
                    p[j] = i;
            }

        var t = new List<int>();
        for (int i = 0; i < start.Length; ++i)
            for (int j = 0; j < cnt[i]; ++j)
                t.Add(start[i] + j * d[i]);

        var res = new long[t.Count];
        for (int i = 0; i < res.Length; ++i)
            res[i] = 1;

        var alpha = new List<int>[N];

        for (int i = 0; i < t.Count; ++i)
            while(t[i] != 1)
            {
                int pp = p[t[i]];
                int a = 0;
                while (t[i] % pp == 0)
                {
                    ++a;
                    t[i] /= pp;
                }
                if (a != 0)
                {
                    if (alpha[pp] == null)
                        alpha[pp] = new List<int>();
                    alpha[pp].Add(a);
                }
            }

        for (int j = 0; j < N; ++j)
        {
            if (alpha[j] == null) continue;
            alpha[j].Sort(new Comparison<int>((a, b) => b - a));
            for (int i = 0; i < alpha[j].Count; ++i)
                res[i] = (res[i] * pow(j, alpha[j][i])) % MOD;
        }


        long tmp = 0;
        foreach (var x in res)
            tmp += x;
        return (int)(tmp % MOD);
    }

    // BEGIN KAWIGIEDIT TESTING
    // Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
    #region Testing code generated by KawigiEdit
    [STAThread]
    private static Boolean KawigiEdit_RunTest(int testNum, int[] p0, int[] p1, int[] p2, Boolean hasAnswer, int p3)
    {
        Console.Write("Test " + testNum + ": [" + "{");
        for (int i = 0; p0.Length > i; ++i)
        {
            if (i > 0)
            {
                Console.Write(",");
            }
            Console.Write(p0[i]);
        }
        Console.Write("}" + "," + "{");
        for (int i = 0; p1.Length > i; ++i)
        {
            if (i > 0)
            {
                Console.Write(",");
            }
            Console.Write(p1[i]);
        }
        Console.Write("}" + "," + "{");
        for (int i = 0; p2.Length > i; ++i)
        {
            if (i > 0)
            {
                Console.Write(",");
            }
            Console.Write(p2[i]);
        }
        Console.Write("}");
        Console.WriteLine("]");
        GCDLCM2 obj;
        int answer;
        obj = new GCDLCM2();
        DateTime startTime = DateTime.Now;
        answer = obj.getMaximalSum(p0, p1, p2);
        DateTime endTime = DateTime.Now;
        Boolean res;
        res = true;
        Console.WriteLine("Time: " + (endTime - startTime).TotalSeconds + " seconds");
        if (hasAnswer)
        {
            Console.WriteLine("Desired answer:");
            Console.WriteLine("\t" + p3);
        }
        Console.WriteLine("Your answer:");
        Console.WriteLine("\t" + answer);
        if (hasAnswer)
        {
            res = answer == p3;
        }
        if (!res)
        {
            Console.WriteLine("DOESN'T MATCH!!!!");
        }
        else if ((endTime - startTime).TotalSeconds >= 2)
        {
            Console.WriteLine("FAIL the timeout");
            res = false;
        }
        else if (hasAnswer)
        {
            Console.WriteLine("Match :-)");
        }
        else
        {
            Console.WriteLine("OK, but is it right?");
        }
        Console.WriteLine("");
        return res;
    }
    public static void Main(string[] args)
    {
        Boolean all_right;
        all_right = true;

        int[] p0;
        int[] p1;
        int[] p2;
        int p3;

        // ----- test 0 -----
        p0 = new int[] { 1 };
        p1 = new int[] { 1 };
        p2 = new int[] { 3 };
        p3 = 8;
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
        // ------------------

        // ----- test 1 -----
        p0 = new int[] { 3 };
        p1 = new int[] { 0 };
        p2 = new int[] { 5 };
        p3 = 15;
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
        // ------------------

        // ----- test 2 -----
        p0 = new int[] { 2 };
        p1 = new int[] { 2 };
        p2 = new int[] { 4 };
        p3 = 32;
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
        // ------------------

        // ----- test 3 -----
        p0 = new int[] { 1, 2 };
        p1 = new int[] { 2, 3 };
        p2 = new int[] { 2, 2 };
        p3 = 33;
        all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
        // ------------------

        // ----- test 4 -----
        p0 = new int[] { 5, 6 };
        p1 = new int[] { 23, 45 };
        p2 = new int[] { 50000, 50000 };
        p3 = 804225394;
        all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
        // ------------------

        if (all_right)
        {
            Console.WriteLine("You're a stud (at least on the example cases)!");
        }
        else
        {
            Console.WriteLine("Some of the test cases had errors.");
        }
        Console.ReadKey();
    }
    #endregion
    // END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
